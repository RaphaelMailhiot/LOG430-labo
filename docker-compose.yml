services:
  # FRONTEND
  frontend:
    build: ./frontend
    env_file: ./frontend/.env
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - inventory-service
      - products-service
      - sales-service
      - store-service
    networks:
      - microservices
    volumes:
      - .:/app
    command: sh -c "npm install && npm run dev"

  # AUTH SERVICE
  auth-service:
    build: ./services/auth
    env_file: ./services/auth/.env
    ports:
      - "3001:3000"
    depends_on:
      - auth-db
    networks:
      - microservices
    command: sh -c "npm run migration:run && npm run seed && npm run dev"

  auth-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
      POSTGRES_DB: auth_db
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    networks:
      - microservices

  # INVENTORY SERVICE
  inventory-service:
    build: ./services/inventory
    env_file: ./services/inventory/.env
    ports:
      - "3002:3000"
    depends_on:
      - inventory-db
    networks:
      - microservices
    command: sh -c "npm run migration:run && npm run seed && npm run dev"

  inventory-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
      POSTGRES_DB: inventory_db
    volumes:
      - inventory_pgdata:/var/lib/postgresql/data
    networks:
      - microservices

  # PRODUCTS SERVICE
  products-service:
    build: ./services/products
    env_file: ./services/products/.env
    ports:
      - "3003:3000"
    depends_on:
      - products-db
    networks:
      - microservices
    command: sh -c "npm run migration:run && npm run seed && npm run dev"

  products-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: products_user
      POSTGRES_PASSWORD: products_pass
      POSTGRES_DB: products_db
    volumes:
      - products_pgdata:/var/lib/postgresql/data
    networks:
      - microservices

  # SALES SERVICE
  sales-service:
    build: ./services/sales
    env_file: ./services/sales/.env
    ports:
      - "3004:3000"
    depends_on:
      - sales-db
    networks:
      - microservices
    command: sh -c "npm run migration:run && npm run seed && npm run dev"

  sales-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: sales_user
      POSTGRES_PASSWORD: sales_pass
      POSTGRES_DB: sales_db
    volumes:
      - sales_pgdata:/var/lib/postgresql/data
    networks:
      - microservices

  # STORE SERVICE
  store-service:
    build: ./services/store
    env_file: ./services/store/.env
    ports:
      - "3005:3000"
    depends_on:
      - store-db
    networks:
      - microservices
    command: sh -c "npm run migration:run && npm run seed && npm run dev"

  store-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: store_user
      POSTGRES_PASSWORD: store_pass
      POSTGRES_DB: store_db
    volumes:
      - store_pgdata:/var/lib/postgresql/data
    networks:
      - microservices

  # KONG API GATEWAY
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong.yml:/kong.yml
    ports:
      - "8000:8000"  # Public (proxy)
      - "8001:8001"  # Admin
    networks:
      - microservices

  # REDIS
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - microservices

  # PROMETHEUS
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices

  # GRAFANA
  grafana:
    image: grafana/grafana
    ports:
      - "3006:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices

  # NGINX (reverse proxy)
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - microservices

volumes:
  app:
  auth_pgdata:
  inventory_pgdata:
  products_pgdata:
  sales_pgdata:
  store_pgdata:
  pgdata:
  grafana_data:
  node_modules:

networks:
  microservices: