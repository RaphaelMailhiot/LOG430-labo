services:

  initdata:
    image: log430-labo:latest
    env_file:
      - .env
    command: sh -c "npx ts-node src/initDataRunner.ts"
    depends_on:
      - db
    networks:
      - monitoring
  migrate:
    image: log430-labo:latest
    env_file:
      - .env
    command: sh -c "npx typeorm migration:run"
    depends_on:
      - db
    networks:
      - monitoring
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - monitoring

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: log430-labo:latest
    container_name: log430-labo-app
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - ./:/LOG430-labo
      - node_modules:/LOG430-labo/node_modules
    command: sh -c "npm run dev:web:docker"
    depends_on:
      - db
    networks:
      - monitoring

  app1:
    image: log430-labo:latest
    env_file:
      - .env
    volumes:
      - ./:/LOG430-labo
      - node_modules:/LOG430-labo/node_modules
    command: sh -c "npm run dev:web:docker"
    depends_on:
      - db
    networks:
      - monitoring

  app2:
    image: log430-labo:latest
    env_file:
      - .env
    volumes:
      - ./:/LOG430-labo
      - node_modules:/LOG430-labo/node_modules
    command: sh -c "npm run dev:web:docker"
    depends_on:
      - db
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: always
    networks:
      - monitoring

  nodeexporter:
    image: prom/node-exporter
    container_name: nodeexporter
    ports:
      - "9100:9100"
    networks:
      - monitoring

  nginx:
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
      # Ajoute autant d'apps que tu veux
    networks:
      - monitoring

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    command:
      - '--nginx.scrape-uri=http://nginx:8080/nginx_status'
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    networks:
      - monitoring

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - monitoring

  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    command: --redis.addr=redis:6379
    depends_on:
      - redis
    networks:
      - monitoring

volumes:
  pgdata:
  node_modules:

networks:
  monitoring:
    driver: bridge